// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"

// DATE "01/16/2025 11:02:24"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module full_adder (
	s,
	x,
	y,
	z,
	c);
output 	s;
input 	x;
input 	y;
input 	z;
output 	c;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \s~output_o ;
wire \c~output_o ;
wire \z~input_o ;
wire \x~input_o ;
wire \y~input_o ;
wire \inst1|inst5~0_combout ;
wire \inst2~combout ;


cyclonev_io_obuf \s~output (
	.i(\inst1|inst5~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s~output_o ),
	.obar());
// synopsys translate_off
defparam \s~output .bus_hold = "false";
defparam \s~output .open_drain_output = "false";
defparam \s~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \c~output (
	.i(\inst2~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\c~output_o ),
	.obar());
// synopsys translate_off
defparam \c~output .bus_hold = "false";
defparam \c~output .open_drain_output = "false";
defparam \c~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \z~input (
	.i(z),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\z~input_o ));
// synopsys translate_off
defparam \z~input .bus_hold = "false";
defparam \z~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \x~input (
	.i(x),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\x~input_o ));
// synopsys translate_off
defparam \x~input .bus_hold = "false";
defparam \x~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \y~input (
	.i(y),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\y~input_o ));
// synopsys translate_off
defparam \y~input .bus_hold = "false";
defparam \y~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \inst1|inst5~0 (
// Equation(s):
// \inst1|inst5~0_combout  = !\z~input_o  $ (!\x~input_o  $ (\y~input_o ))

	.dataa(!\z~input_o ),
	.datab(!\x~input_o ),
	.datac(!\y~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1|inst5~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst1|inst5~0 .extended_lut = "off";
defparam \inst1|inst5~0 .lut_mask = 64'h6969696969696969;
defparam \inst1|inst5~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst2(
// Equation(s):
// \inst2~combout  = (!\z~input_o  & (\x~input_o  & \y~input_o )) # (\z~input_o  & ((\y~input_o ) # (\x~input_o )))

	.dataa(!\z~input_o ),
	.datab(!\x~input_o ),
	.datac(!\y~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst2~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst2.extended_lut = "off";
defparam inst2.lut_mask = 64'h1717171717171717;
defparam inst2.shared_arith = "off";
// synopsys translate_on

assign s = \s~output_o ;

assign c = \c~output_o ;

endmodule

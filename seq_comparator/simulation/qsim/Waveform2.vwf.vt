// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/13/2025 10:27:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          seq_comparator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module seq_comparator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] swA;
reg [7:0] swB;
// wires                                               
wire [1:0] comparator;

// assign statements (if any)                          
seq_comparator i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.comparator(comparator),
	.swA(swA),
	.swB(swB)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	clk = #60000 1'b0;
	clk = #60000 1'b1;
	clk = #80000 1'b0;
	clk = #60000 1'b1;
	clk = #40000 1'b0;
	clk = #60000 1'b1;
	clk = #60000 1'b0;
	clk = #60000 1'b1;
	clk = #80000 1'b0;
	clk = #60000 1'b1;
	clk = #60000 1'b0;
	clk = #60000 1'b1;
	clk = #80000 1'b0;
	clk = #60000 1'b1;
	clk = #80000 1'b0;
end 
// swA[ 7 ]
initial
begin
	swA[7] = 1'b1;
	swA[7] = #740000 1'b0;
end 
// swA[ 6 ]
initial
begin
	swA[6] = 1'b1;
	swA[6] = #740000 1'b0;
end 
// swA[ 5 ]
initial
begin
	swA[5] = 1'b1;
	swA[5] = #740000 1'b0;
end 
// swA[ 4 ]
initial
begin
	swA[4] = 1'b1;
	swA[4] = #740000 1'b0;
end 
// swA[ 3 ]
initial
begin
	swA[3] = 1'b1;
	swA[3] = #740000 1'b0;
end 
// swA[ 2 ]
initial
begin
	swA[2] = 1'b1;
	swA[2] = #740000 1'b0;
end 
// swA[ 1 ]
initial
begin
	swA[1] = 1'b1;
	swA[1] = #740000 1'b0;
end 
// swA[ 0 ]
initial
begin
	swA[0] = 1'b1;
	swA[0] = #740000 1'b0;
end 
// swB[ 7 ]
initial
begin
	swB[7] = 1'b0;
	swB[7] = #400000 1'b1;
end 
// swB[ 6 ]
initial
begin
	swB[6] = 1'b0;
	swB[6] = #400000 1'b1;
end 
// swB[ 5 ]
initial
begin
	swB[5] = 1'b0;
	swB[5] = #400000 1'b1;
end 
// swB[ 4 ]
initial
begin
	swB[4] = 1'b0;
	swB[4] = #400000 1'b1;
end 
// swB[ 3 ]
initial
begin
	swB[3] = 1'b0;
	swB[3] = #400000 1'b1;
end 
// swB[ 2 ]
initial
begin
	swB[2] = 1'b0;
	swB[2] = #400000 1'b1;
end 
// swB[ 1 ]
initial
begin
	swB[1] = 1'b0;
	swB[1] = #400000 1'b1;
end 
// swB[ 0 ]
initial
begin
	swB[0] = 1'b0;
	swB[0] = #400000 1'b1;
end 
endmodule

